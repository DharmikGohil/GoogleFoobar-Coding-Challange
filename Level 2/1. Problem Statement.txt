Project: Power Maximization in the Quantum Flux Field 🚀🌌

Problem Statement 🛠️

Welcome to Commander Lambda's colossal space station, where power is the key to survival, especially when dealing with doomsday devices! The space station, nestled in a quasar quantum flux field, relies on solar panels for its insatiable power needs. Your mission, should you choose to accept it, is to repair these solar panels without jeopardizing the station's power supply.

But wait, it's not as simple as it sounds! The quantum flux field wreaks havoc on the solar panels, and taking down all of them at once is not an option. Your challenge is to figure out which sets of panels you can take offline to repair, all while maintaining the maximum power output.

This is where your genius comes in! You need to develop a function, solution(xs), that takes a list of integers representing the power output levels of each panel in an array. Your function should return the maximum product of some non-empty subset of those numbers.

For example, if an array contains panels with power output levels of [2, -3, 1, 0, -5], then the maximum product would be found by taking the subset: xs[0] = 2, xs[1] = -3, xs[4] = -5, giving the product 2 * (-3) * (-5) = 30. So, solution([2, -3, 1, 0, -5]) will be "30".

Constraints 🧊

Each array of solar panels contains at least 1 and no more than 50 panels.
Each panel will have a power output level whose absolute value is no greater than 1000.
Some panels are malfunctioning so badly that they're draining energy, but fear not, as you can combine two negative-output panels to produce the positive output of the multiple of their power values!
Implementation Details 🖋️

To provide a Python solution, edit solution.py. For a Java solution, edit Solution.java.

Your Solution (In Python) 🐍

Test Cases 🧪

Your code should pass the following test cases. Note that it may also be run against hidden test cases not shown here.

-- Python cases --

Input: solution.solution([2, 0, 2, 2, 0])

Output: 8
Input: solution.solution([-2, -3, 4, -5])

Output: 60
-- Java cases --

Input: Solution.solution({2, 0, 2, 2, 0})

Output: 8
Input: Solution.solution({-2, -3, 4, -5})

Output: 60
Let the power be with you! 🌌✨ May the solar force guide your code!
